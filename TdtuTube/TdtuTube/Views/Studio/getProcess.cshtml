@model TdtuTube.Models.Video


<div class="form-group">
    @Html.LabelFor(model => model.title, "Tiêu đề", htmlAttributes: new { @class = "create-form-label" })
    <div class="col-md-10">
        @Html.EditorFor(model => model.title, new { htmlAttributes = new { @class = "create-form-input", @id = "inputTitle" } })
        @Html.ValidationMessageFor(model => model.title, "", new { @class = "text-danger" })
    </div>
</div>

<div class="form-group">
    @Html.LabelFor(model => model.description, "Mô tả", htmlAttributes: new { @class = "create-form-label" })
    <div class="col-md-10">
        @Html.TextAreaFor(model => model.description, new { @class = "create-form-textarea", @id = "inputDes" })
        @Html.ValidationMessageFor(model => model.description, "", new { @class = "text-danger" })
    </div>
</div>
<div class="create-form-space">
    <div class="form-group">
        @Html.LabelFor(model => model.tag_id, "Chọn thẻ video", htmlAttributes: new { @class = "create-form-label" })
        <div class="col-md-10">
            @Html.DropDownList("tag_id", (SelectList)ViewBag.tag_id, htmlAttributes: new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.tag_id, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.privacy, "Quyền riêng tư", htmlAttributes: new { @class = "create-form-label" })
        <div class="col-md-10">
            <div class="checkbox">
                @Html.DropDownListFor(model => model.privacy, new List<SelectListItem>()
           {
               new SelectListItem(){ Text= "Công khai", Value = "false"},
               new SelectListItem(){ Text= "Không công khai", Value = "true"}
           }, "Chọn quyền riêng tư")
                @Html.ValidationMessageFor(model => model.privacy, "", new { @class = "text-danger" })
            </div>
        </div>
    </div>

    <div></div>
</div>


@Html.HiddenFor(model => model.user_id, new { Value = ViewBag.UserId })
@Html.HiddenFor(model => model.like_count, new { Value = 0 })
@Html.HiddenFor(model => model.view_count, new { Value = 0 })
@Html.HiddenFor(model => model.comment_count, new { Value = 0 })
@Html.HiddenFor(model => model.feature, new { Value = false })
@Html.HiddenFor(model => model.hide, new { Value = false })

@Html.HiddenFor(model => model.length)

<div class="form-group">
    @Html.LabelFor(model => model.thumbnail, "Chọn ảnh thumbnail", htmlAttributes: new { @class = "create-form-label" })
    <div class="col-md-10">
        <input type="file" class="create-form-file" name="img" id="inputImg" accept=".jpg,.png,.gif,.jpeg,.bmp" />
        @Html.ValidationMessageFor(model => model.thumbnail, "", new { @class = "text-danger" })
    </div>
</div>


@Html.HiddenFor(model => model.meta)
@Html.HiddenFor(model => model.datebegin)
@Html.HiddenFor(model => model.status, new { Value = true })
@Html.HiddenFor(model => model.order, new { Value = 0 })


<div class="form-group">
    <input type="submit" value="Đăng tải" class="create-form-btn" />
</div>
<script src="~/Scripts/uploadVideo.js"></script>
<script src="~/Scripts/ckeditor/ckeditor.js"></script>
<script type="text/javascript">
    $(window).on('load', function () {
        $('#inputDes').ckeditor();
    });
    var editor = CKEDITOR.replace("inputDes", {
        customConfig: '/Scripts/ckeditor/ckeditor.js'
    })
    editor.on('change', function (evt) {
        // Update the counter with text length of editor HTML output.

        $("#result-des-video").text(editor.document.getBody().getText());
    }, editor.element.$);

    function readURL(input) {
        if (input.files && input.files[0]) {
            var reader = new FileReader();
            reader.onload = function (e) {
                $('.result-img').attr('src', e.target.result);
            }
            reader.readAsDataURL(input.files[0]);
        }
    }

    $("#inputImg").change(function () {
        readURL(this);
    })
</script>