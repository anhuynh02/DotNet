@model TdtuTube.Models.Video
@using TdtuTube.Libs
@{
    ViewBag.Title = "TdtuTude";
}

<div class="flex flex-col lg:ml-60 w-full lg:w-4/5 xl:w-5/6" id="mainContainer">

    <div id="container-video" style="margin-left: 4rem; margin-right: 4rem ;margin-top: 4.5rem">

        @if (Model == null)
        {
            <h1>Video không tồn tại</h1>
        }
        else if (Model.privacy == true)
        {
            <h1>Đây là Video riêng tư</h1>
        }
        else
        {
            <div id="watch-video" onload="display_sidebar()">
                <div id="notification-wrapper"></div>
                <div class="watch-video_grid">
                    <div class="watch-video_grid-left" style="padding-top: 13px">

                        <div class="video-play">
                            <video controls autoplay>
                                <source src="@Model.path" type="video/mp4">

                                Your browser does not support the video tag.
                            </video>
                        </div>

                        @if (ViewBag.PlaylistMeta != null)
                        {
                            Html.RenderAction("getPlaylist", "Watch", new { videoMeta = Model.meta, playlistMeta = ViewBag.PlaylistMeta });
                        }

                        <div class="video-content">
                            <div class="video-content-heading">
                                <h1 style="font-size: 2rem;">@Model.title</h1>
                                <div id="channel-row">
                                    <div id="owner">
                                        <div class="owner-info">
                                            <a href="/channel/@Model.User.meta" class="owner-img">
                                                <img src="@Model.User.avatar_path" alt="">
                                            </a>
                                            <div class="owner-name-follow">
                                                <div class="owner-name">
                                                    <a href="/channel/@Model.User.meta" title="@Model.User.name">@Model.User.name</a>
                                                </div>
                                                <div class="owner-follow">
                                                    @VideoFormat.readableNumber((int)Model.User.subscriber_count) người đăng ký
                                                </div>
                                            </div>
                                            <div class="sub-btn">
                                                <div class="font-btn">
                                                    @if (Session["UserID"] == null)
                                                    {
                                                        <a href="/login"><button class="btn-subscribe">Đăng kí</button></a>
                                                    }
                                                    else
                                                    {
                                                        if ((int)Session["UserID"] != Model.User.id)
                                                        {
                                                            Html.RenderAction("getSubscribe", "Button", new { ownerId = Model.User.id });
                                                        }
                                                    }
                                                </div>
                                            </div>
                                            <div class="like-btn">
                                                <div id="likeContainer" class="font-btn">
                                                    @if (Session["UserID"] == null)
                                                    {
                                                        <a href="/login">
                                                            <button class="btn-action">
                                                                <i class="material-icons-outlined text-white md-18 icon-margin">thumb_up</i>
                                                                @VideoFormat.readableNumber((int)@Model.like_count)
                                                            </button>
                                                        </a>
                                                    }
                                                    else
                                                    {
                                                        Html.RenderAction("getLike", "Button", new { videoId = Model.id });
                                                    }
                                                </div>
                                            </div>
                                            <div class="playlist-btn">
                                                <div class="font-btn">
                                                    @if (Session["UserID"] == null)
                                                    {
                                                        <a href="/login">
                                                            <button class="btn-action">
                                                                <i class="material-icons-outlined text-white md-21 icon-margin">playlist_add</i>
                                                                Lưu
                                                            </button>
                                                        </a>
                                                    }
                                                    else
                                                    {
                                                        <button class="btn-action" id="addPlaylistBtn" onclick="showAddToPlaylistModal()">
                                                            <i class="material-icons-outlined text-white md-21 icon-margin">playlist_add</i>
                                                            Lưu
                                                        </button>
                                                    }
                                                </div>
                                            </div>
                                        </div>


                                    </div>
                                    <div class="video-content-description" id="main-desc" onclick="show_more(this)">
                                        <div class="video-content-description-view">
                                            <span>@VideoFormat.readableNumber((int)Model.view_count) lượt xem</span>
                                            <span>@VideoFormat.dateAgo((DateTime)Model.datebegin)</span>
                                        </div>
                                        <p>@Model.description</p>

                                    </div>
                                </div>
                            </div>

                            <div class="reload-comment">

                            </div>
                            @{ Html.RenderAction("getVideoComments", "Button", new { videoId = Model.id });}

                        </div>
                    </div>
                    @{Html.RenderAction("getVideos", "Watch", new { videoId = Model.id, tagId = Model.tag_id });}
                </div>
            </div>
        }
    </div>

</div>

<!-- Add to playlist modal -->
<div id="modalBackground" class="modal-background">
    <div class="modal-content">
        <!-- Modal title -->
        <div class="modal-title">
            <div class="playlist-modal-header">Lưu vào...</div>
            <div style="margin-right:14px">
                <button title="Hủy" onclick="hideAddToPlaylistModal()">
                    <span class="close">&times;</span>
                </button>
            </div>
        </div>
        <!-- Playlist list -->
        <div id="playlistList" class="scroll-bar playlist-add-items">

            @if (Session["UserId"] != null)
            {
                Html.RenderAction("getWatchPlaylists", "Playlist", new { videoId = Model.id });
            }

        </div>

        <!-- Add new playlist -->
        <div id="btnShowAddPlaylistForm" onclick="showAddPlaylistForm();" class="add-playlist-form-container cursor-pointer">
            <i class="material-icons text-white md-21">+</i> Tạo danh sách phát mới
        </div>

        <div id="addPlaylistForm" style="display: none;" class="add-playlist-form-container">
            <div class="txt_field">
                <label>
                    Tên
                </label>
                <input id="addPlaylistName" class="modal-text" placeholder="Nhập tên danh sách phát..." maxlength="100" required type="text" />
                <div style="display: flex">
                    <!-- Error message -->
                    <div id="inputError" style="color: red; display: none;">
                        Bắt buộc
                    </div>
                    <!-- Character counter -->
                    <div style="margin-left: auto;">
                        <span id="inputCounter">0</span>/100
                    </div>
                </div>
            </div>
            <div>
                <label>Quyền riêng tư</label>
                <select id="addPlaylistPrivacy" class="modal-option">
                    <option style="color:black" value="1">Riêng tư</option>
                    <option style="color:black" value="0">Công khai</option>
                </select>
            </div>
            <div class="playlist-modal-button cursor-pointer">
                <button id="btnAddPlaylist" style="color: #ababab;" disabled>
                    Tạo
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Toast message -->
<div id="toast">
    Đã thêm vào
    Đã xóa khỏi
</div>

<script>
    document.getElementById("sideBar").style.display = "none";
    document.getElementById("mainContainer").classList.remove("lg:ml-60");
    document.getElementById("mainContainer").classList.remove("lg:w-4/5");
    document.getElementById("mainContainer").classList.remove("xl:w-5/6");
    document.getElementById("mainContainer").classList.add("lg:w-5/5");
    let comment = document.getElementById("comment-input");
    let commentBtn = document.getElementById("commentBtn");
    const modalBackground = document.getElementById("modalBackground");
    const btnShowAddPlaylistForm = document.getElementById("btnShowAddPlaylistForm");
    const playlistList = document.getElementById("playlistList");
    const addPlaylistForm = document.getElementById("addPlaylistForm");
    const addPlaylistName = document.getElementById("addPlaylistName");
    const inputError = document.getElementById("inputError");
    const inputCounter = document.getElementById("inputCounter");
    const addPlaylistPrivacy = document.getElementById("addPlaylistPrivacy");
    const btnAddPlaylist = document.getElementById("btnAddPlaylist");
    const toast = document.getElementById("toast");

    const videoId = @Model.id;

    // Show add to playlist modal
    function showAddToPlaylistModal() {
        modalBackground.style.display = "block";
    }

    // Hide add to playlist modal when click close icon
    function hideAddToPlaylistModal() {
        modalBackground.style.display = "none";
        btnShowAddPlaylistForm.style.display = "block";
        addPlaylistForm.style.display = "none";

        resetForm();
    }

    // Hide add to playlist modal when click outside of modal
    window.onclick = function (event) {
        if (event.target == modalBackground) {
            hideAddToPlaylistModal();
        }
    }

    // Reset add new playlist form
    function resetForm() {
        addPlaylistForm.children[0].removeAttribute("style");
        inputError.style.display = "none";
        btnAddPlaylist.disabled = false;
        btnAddPlaylist.style.color = "#3ea6ff";
        addPlaylistName.value = "";
        inputCounter.textContent = addPlaylistName.value.length;
        addPlaylistPrivacy.value = "0";
    }

    // Show form to add new playlist
    function showAddPlaylistForm() {
        btnShowAddPlaylistForm.style.display = "none";
        addPlaylistForm.style.display = "block";
    }

    // Update count show error if input is empty
    addPlaylistName.addEventListener("input", function () {
        if (addPlaylistName.value.trim() == "") {
            addPlaylistForm.children[0].style = "color: red";
            inputError.style.display = "block";
            btnAddPlaylist.disabled = true;
            btnAddPlaylist.style.color = "#ababab";
        } else {
            addPlaylistForm.children[0].removeAttribute("style");
            inputError.style.display = "none";
            btnAddPlaylist.disabled = false;
            btnAddPlaylist.style.color = "#3ea6ff";
        }
        inputCounter.textContent = addPlaylistName.value.length;
    });

    // Add video to exist playlists
    function addVideoToPlaylist(e, playlistId, playlistName) {
        let url;
        if (e.target.checked) {
            url = "/Playlist/postPlaylistContent";
            toast.textContent = "Đã thêm vào " + playlistName;
        } else {
            url = "/Playlist/deletePlaylistContent";
            toast.textContent = "Đã xóa khỏi " + playlistName;
        }
        $.ajax({
            url: url,
            type: "POST",
            data: {
                __RequestVerificationToken: $("[name='__RequestVerificationToken']").val(),
                playlistId: playlistId,
                videoId: videoId
            },
            success: function () {
                showToast();
            }
        });
    }

    // Create new playlist and add video to it
    btnAddPlaylist.addEventListener('click', function () {
        $.ajax({
            url: "/Playlist/postPlaylist",
            type: "POST",
            data: {
                __RequestVerificationToken: $("[name='__RequestVerificationToken']").val(),
                name: $("#addPlaylistName").val().trim(),
                privacy: $("#addPlaylistPrivacy").val(),
                videoId: videoId
            },
            success: function () {
                toast.textContent = "Đã thêm vào " + $("#addPlaylistName").val().trim();

                hideAddToPlaylistModal();

                showToast();

                $.ajax({
                    url: "/Playlist/getWatchPlaylists",
                    type: "GET",
                    data: {
                        videoId: videoId
                    },
                    success: function (data) {
                        playlistList.innerHTML = data;
;                   }
                });
            }
        });
    });

    // Show toast message
    function showToast() {
        toast.className = "show";
        setTimeout(function () {
            toast.className = toast.className.replace("show", "");
        }, 3000);
    }

    function checkCommentBtn() {
        // console.log(commentBtn.disabled);
        if (comment.value != "") {
            commentBtn.disabled = false;
        } else {
            commentBtn.disabled = true;
        }
    }

    function show_more(a) {
        let des = document.getElementById("main-desc");
        des.classList.toggle("description-show");

    }

    comment.addEventListener("keydown", function () {
        var el = this;
        setTimeout(function () {
            el.style.cssText = "height: 24px;";
            el.style.cssText = "height:" + el.scrollHeight + "px";
        }, 0);
    });
</script>